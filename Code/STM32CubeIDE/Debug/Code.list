
Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001e54  08001e54  00011e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e7c  08001e7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e7c  08001e7c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e7c  08001e7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e7c  08001e7c  00011e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e80  08001e80  00011e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08001e90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08001e90  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bebf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001840  00000000  00000000  0002bef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002d738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002e0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b49  00000000  00000000  0002ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2a5  00000000  00000000  00040569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006da69  00000000  00000000  0004d80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b4  00000000  00000000  000bb2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e3c 	.word	0x08001e3c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001e3c 	.word	0x08001e3c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb88 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f906 	bl	8000438 <MX_GPIO_Init>
  MX_ADC_Init();
 800022c:	f000 f82c 	bl	8000288 <MX_ADC_Init>
  MX_I2C1_Init();
 8000230:	f000 f892 	bl	8000358 <MX_I2C1_Init>
//  MX_RTC_Init();
  MX_USART1_UART_Init();
 8000234:	f000 f8d0 	bl	80003d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GPIOB->ODR |= GPIO_ODR_13;
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <main+0x60>)
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	4b10      	ldr	r3, [pc, #64]	; (8000280 <main+0x60>)
 800023e:	2180      	movs	r1, #128	; 0x80
 8000240:	0189      	lsls	r1, r1, #6
 8000242:	430a      	orrs	r2, r1
 8000244:	615a      	str	r2, [r3, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if ((GPIOB->IDR & GPIO_IDR_3) == 0b0){
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <main+0x60>)
 8000248:	691b      	ldr	r3, [r3, #16]
 800024a:	2208      	movs	r2, #8
 800024c:	4013      	ands	r3, r2
 800024e:	d106      	bne.n	800025e <main+0x3e>
		  //SW1 pressed
		  //just turns on and off an LED for now
		  GPIOB->ODR &= ~(GPIO_ODR_13);
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <main+0x60>)
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <main+0x60>)
 8000256:	490b      	ldr	r1, [pc, #44]	; (8000284 <main+0x64>)
 8000258:	400a      	ands	r2, r1
 800025a:	615a      	str	r2, [r3, #20]
 800025c:	e006      	b.n	800026c <main+0x4c>
	  } else {
		  GPIOB->ODR |= GPIO_ODR_13;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <main+0x60>)
 8000260:	695a      	ldr	r2, [r3, #20]
 8000262:	4b07      	ldr	r3, [pc, #28]	; (8000280 <main+0x60>)
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	0189      	lsls	r1, r1, #6
 8000268:	430a      	orrs	r2, r1
 800026a:	615a      	str	r2, [r3, #20]
	  }

	  if ((GPIOA->IDR & GPIO_IDR_15) == 0b0){
 800026c:	2390      	movs	r3, #144	; 0x90
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	691b      	ldr	r3, [r3, #16]
		  //SW2 pressed
	  }

	  if ((GPIOB->IDR & GPIO_IDR_15) == 0b0){
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <main+0x60>)
 8000274:	691b      	ldr	r3, [r3, #16]
		  //SW3 pressed
	  }

	  if ((GPIOB->IDR & GPIO_IDR_14) == GPIO_IDR_14) {
 8000276:	4b02      	ldr	r3, [pc, #8]	; (8000280 <main+0x60>)
 8000278:	691b      	ldr	r3, [r3, #16]
		  //plug detected
	  }

	  readData();
 800027a:	f000 f9ad 	bl	80005d8 <readData>
  {
 800027e:	e7e2      	b.n	8000246 <main+0x26>
 8000280:	48000400 	.word	0x48000400
 8000284:	ffffdfff 	.word	0xffffdfff

08000288 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	0018      	movs	r0, r3
 8000292:	230c      	movs	r3, #12
 8000294:	001a      	movs	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f001 fdc8 	bl	8001e2c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800029c:	4b2c      	ldr	r3, [pc, #176]	; (8000350 <MX_ADC_Init+0xc8>)
 800029e:	4a2d      	ldr	r2, [pc, #180]	; (8000354 <MX_ADC_Init+0xcc>)
 80002a0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002a2:	4b2b      	ldr	r3, [pc, #172]	; (8000350 <MX_ADC_Init+0xc8>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80002a8:	4b29      	ldr	r3, [pc, #164]	; (8000350 <MX_ADC_Init+0xc8>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ae:	4b28      	ldr	r3, [pc, #160]	; (8000350 <MX_ADC_Init+0xc8>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80002b4:	4b26      	ldr	r3, [pc, #152]	; (8000350 <MX_ADC_Init+0xc8>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80002ba:	4b25      	ldr	r3, [pc, #148]	; (8000350 <MX_ADC_Init+0xc8>)
 80002bc:	2208      	movs	r2, #8
 80002be:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 80002c0:	4b23      	ldr	r3, [pc, #140]	; (8000350 <MX_ADC_Init+0xc8>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80002c6:	4b22      	ldr	r3, [pc, #136]	; (8000350 <MX_ADC_Init+0xc8>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80002cc:	4b20      	ldr	r3, [pc, #128]	; (8000350 <MX_ADC_Init+0xc8>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80002d2:	4b1f      	ldr	r3, [pc, #124]	; (8000350 <MX_ADC_Init+0xc8>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d8:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <MX_ADC_Init+0xc8>)
 80002da:	22c2      	movs	r2, #194	; 0xc2
 80002dc:	32ff      	adds	r2, #255	; 0xff
 80002de:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <MX_ADC_Init+0xc8>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <MX_ADC_Init+0xc8>)
 80002e8:	2224      	movs	r2, #36	; 0x24
 80002ea:	2100      	movs	r1, #0
 80002ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_ADC_Init+0xc8>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <MX_ADC_Init+0xc8>)
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 fb82 	bl	8000a00 <HAL_ADC_Init>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000300:	f000 f9c8 	bl	8000694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2208      	movs	r2, #8
 8000308:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	0152      	lsls	r2, r2, #5
 8000310:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	0552      	lsls	r2, r2, #21
 8000318:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800031a:	1d3a      	adds	r2, r7, #4
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_ADC_Init+0xc8>)
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fcad 	bl	8000c80 <HAL_ADC_ConfigChannel>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800032a:	f000 f9b3 	bl	8000694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2209      	movs	r2, #9
 8000332:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000334:	1d3a      	adds	r2, r7, #4
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_ADC_Init+0xc8>)
 8000338:	0011      	movs	r1, r2
 800033a:	0018      	movs	r0, r3
 800033c:	f000 fca0 	bl	8000c80 <HAL_ADC_ConfigChannel>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000344:	f000 f9a6 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000028 	.word	0x20000028
 8000354:	40012400 	.word	0x40012400

08000358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_I2C1_Init+0x74>)
 800035e:	4a1c      	ldr	r2, [pc, #112]	; (80003d0 <MX_I2C1_Init+0x78>)
 8000360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_I2C1_Init+0x74>)
 8000364:	4a1b      	ldr	r2, [pc, #108]	; (80003d4 <MX_I2C1_Init+0x7c>)
 8000366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <MX_I2C1_Init+0x74>)
 8000370:	2201      	movs	r2, #1
 8000372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_I2C1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_I2C1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_I2C1_Init+0x74>)
 8000394:	0018      	movs	r0, r3
 8000396:	f000 ffc3 	bl	8001320 <HAL_I2C_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800039e:	f000 f979 	bl	8000694 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <MX_I2C1_Init+0x74>)
 80003a4:	2100      	movs	r1, #0
 80003a6:	0018      	movs	r0, r3
 80003a8:	f001 f850 	bl	800144c <HAL_I2CEx_ConfigAnalogFilter>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003b0:	f000 f970 	bl	8000694 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <MX_I2C1_Init+0x74>)
 80003b6:	2100      	movs	r1, #0
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 f893 	bl	80014e4 <HAL_I2CEx_ConfigDigitalFilter>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003c2:	f000 f967 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000068 	.word	0x20000068
 80003d0:	40005400 	.word	0x40005400
 80003d4:	2000090e 	.word	0x2000090e

080003d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003de:	4a15      	ldr	r2, [pc, #84]	; (8000434 <MX_USART1_UART_Init+0x5c>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003e4:	2296      	movs	r2, #150	; 0x96
 80003e6:	0212      	lsls	r2, r2, #8
 80003e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <MX_USART1_UART_Init+0x58>)
 800041c:	0018      	movs	r0, r3
 800041e:	f001 f923 	bl	8001668 <HAL_UART_Init>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000426:	f000 f935 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200000bc 	.word	0x200000bc
 8000434:	40013800 	.word	0x40013800

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b08b      	sub	sp, #44	; 0x2c
 800043c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	2414      	movs	r4, #20
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2314      	movs	r3, #20
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f001 fcef 	bl	8001e2c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044e:	4b5b      	ldr	r3, [pc, #364]	; (80005bc <MX_GPIO_Init+0x184>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b5a      	ldr	r3, [pc, #360]	; (80005bc <MX_GPIO_Init+0x184>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0309      	lsls	r1, r1, #12
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <MX_GPIO_Init+0x184>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	031b      	lsls	r3, r3, #12
 8000464:	4013      	ands	r3, r2
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046a:	4b54      	ldr	r3, [pc, #336]	; (80005bc <MX_GPIO_Init+0x184>)
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	4b53      	ldr	r3, [pc, #332]	; (80005bc <MX_GPIO_Init+0x184>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	03c9      	lsls	r1, r1, #15
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	4b50      	ldr	r3, [pc, #320]	; (80005bc <MX_GPIO_Init+0x184>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	03db      	lsls	r3, r3, #15
 8000480:	4013      	ands	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b4d      	ldr	r3, [pc, #308]	; (80005bc <MX_GPIO_Init+0x184>)
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	4b4c      	ldr	r3, [pc, #304]	; (80005bc <MX_GPIO_Init+0x184>)
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	0289      	lsls	r1, r1, #10
 8000490:	430a      	orrs	r2, r1
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	4b49      	ldr	r3, [pc, #292]	; (80005bc <MX_GPIO_Init+0x184>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	029b      	lsls	r3, r3, #10
 800049c:	4013      	ands	r3, r2
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b46      	ldr	r3, [pc, #280]	; (80005bc <MX_GPIO_Init+0x184>)
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b45      	ldr	r3, [pc, #276]	; (80005bc <MX_GPIO_Init+0x184>)
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	02c9      	lsls	r1, r1, #11
 80004ac:	430a      	orrs	r2, r1
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	4b42      	ldr	r3, [pc, #264]	; (80005bc <MX_GPIO_Init+0x184>)
 80004b2:	695a      	ldr	r2, [r3, #20]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	02db      	lsls	r3, r3, #11
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80004be:	4940      	ldr	r1, [pc, #256]	; (80005c0 <MX_GPIO_Init+0x188>)
 80004c0:	4b40      	ldr	r3, [pc, #256]	; (80005c4 <MX_GPIO_Init+0x18c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 ff0d 	bl	80012e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	22e0      	movs	r2, #224	; 0xe0
 80004ce:	0212      	lsls	r2, r2, #8
 80004d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2203      	movs	r2, #3
 80004d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	4a39      	ldr	r2, [pc, #228]	; (80005c8 <MX_GPIO_Init+0x190>)
 80004e2:	0019      	movs	r1, r3
 80004e4:	0010      	movs	r0, r2
 80004e6:	f000 fd8d 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	4a37      	ldr	r2, [pc, #220]	; (80005cc <MX_GPIO_Init+0x194>)
 80004ee:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2203      	movs	r2, #3
 80004f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	193a      	adds	r2, r7, r4
 80004fe:	2390      	movs	r3, #144	; 0x90
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	0011      	movs	r1, r2
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fd7d 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 PB12 PB13
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800050a:	193b      	adds	r3, r7, r4
 800050c:	4a2c      	ldr	r2, [pc, #176]	; (80005c0 <MX_GPIO_Init+0x188>)
 800050e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	2201      	movs	r2, #1
 8000514:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	193b      	adds	r3, r7, r4
 8000524:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <MX_GPIO_Init+0x18c>)
 8000526:	0019      	movs	r1, r3
 8000528:	0010      	movs	r0, r2
 800052a:	f000 fd6b 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 800052e:	0021      	movs	r1, r4
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2288      	movs	r2, #136	; 0x88
 8000534:	01d2      	lsls	r2, r2, #7
 8000536:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000538:	000c      	movs	r4, r1
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	193b      	adds	r3, r7, r4
 8000548:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <MX_GPIO_Init+0x18c>)
 800054a:	0019      	movs	r1, r3
 800054c:	0010      	movs	r0, r2
 800054e:	f000 fd59 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <MX_GPIO_Init+0x198>)
 8000556:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2201      	movs	r2, #1
 8000562:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000564:	193b      	adds	r3, r7, r4
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <MX_GPIO_Init+0x18c>)
 8000568:	0019      	movs	r1, r3
 800056a:	0010      	movs	r0, r2
 800056c:	f000 fd4a 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000570:	193b      	adds	r3, r7, r4
 8000572:	22c0      	movs	r2, #192	; 0xc0
 8000574:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000576:	193b      	adds	r3, r7, r4
 8000578:	2203      	movs	r2, #3
 800057a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000582:	193b      	adds	r3, r7, r4
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <MX_GPIO_Init+0x19c>)
 8000586:	0019      	movs	r1, r3
 8000588:	0010      	movs	r0, r2
 800058a:	f000 fd3b 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800058e:	0021      	movs	r1, r4
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	0212      	lsls	r2, r2, #8
 8000596:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2201      	movs	r2, #1
 80005a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	187a      	adds	r2, r7, r1
 80005a6:	2390      	movs	r3, #144	; 0x90
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 fd29 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b00b      	add	sp, #44	; 0x2c
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	40021000 	.word	0x40021000
 80005c0:	00003834 	.word	0x00003834
 80005c4:	48000400 	.word	0x48000400
 80005c8:	48000800 	.word	0x48000800
 80005cc:	00001fff 	.word	0x00001fff
 80005d0:	00008008 	.word	0x00008008
 80005d4:	48001400 	.word	0x48001400

080005d8 <readData>:

/* USER CODE BEGIN 4 */

void readData(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	//stop ADC
	ADC1->CR |= ADC_CR_ADSTP;
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <readData+0xb8>)
 80005e0:	689a      	ldr	r2, [r3, #8]
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <readData+0xb8>)
 80005e4:	2110      	movs	r1, #16
 80005e6:	430a      	orrs	r2, r1
 80005e8:	609a      	str	r2, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP);
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <readData+0xb8>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	2210      	movs	r2, #16
 80005f2:	4013      	ands	r3, r2
 80005f4:	2b10      	cmp	r3, #16
 80005f6:	d0f9      	beq.n	80005ec <readData+0x14>
	//check calibration, if not calibrate
	if ((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL) {
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <readData+0xb8>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	0fdb      	lsrs	r3, r3, #31
 80005fe:	07da      	lsls	r2, r3, #31
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	061b      	lsls	r3, r3, #24
 8000604:	429a      	cmp	r2, r3
 8000606:	d10f      	bne.n	8000628 <readData+0x50>
		ADC1->CR |= ADC_CR_ADCAL;
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <readData+0xb8>)
 800060a:	689a      	ldr	r2, [r3, #8]
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <readData+0xb8>)
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0609      	lsls	r1, r1, #24
 8000612:	430a      	orrs	r2, r1
 8000614:	609a      	str	r2, [r3, #8]
		while ((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL);
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <readData+0xb8>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	0fdb      	lsrs	r3, r3, #31
 800061e:	07da      	lsls	r2, r3, #31
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	061b      	lsls	r3, r3, #24
 8000624:	429a      	cmp	r2, r3
 8000626:	d0f7      	beq.n	8000618 <readData+0x40>
	}
	//check if ADC is RDY
	if ((ADC1->ISR & ADC_ISR_ADRDY) == 0b0) {
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <readData+0xb8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2201      	movs	r2, #1
 800062e:	4013      	ands	r3, r2
 8000630:	d10b      	bne.n	800064a <readData+0x72>
		ADC1->CR |= ADC_CR_ADEN;
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <readData+0xb8>)
 8000634:	689a      	ldr	r2, [r3, #8]
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <readData+0xb8>)
 8000638:	2101      	movs	r1, #1
 800063a:	430a      	orrs	r2, r1
 800063c:	609a      	str	r2, [r3, #8]
		while ((ADC1->ISR & ADC_ISR_ADRDY) == 0b0);
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <readData+0xb8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2201      	movs	r2, #1
 8000646:	4013      	ands	r3, r2
 8000648:	d0fa      	beq.n	8000640 <readData+0x68>
	}

	ADC1->CR |= ADC_CR_ADSTART;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <readData+0xb8>)
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <readData+0xb8>)
 8000650:	2104      	movs	r1, #4
 8000652:	430a      	orrs	r2, r1
 8000654:	609a      	str	r2, [r3, #8]
	while ((ADC1->ISR & ADC_ISR_EOC) == 0b0);
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <readData+0xb8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2204      	movs	r2, #4
 800065e:	4013      	ands	r3, r2
 8000660:	d0fa      	beq.n	8000658 <readData+0x80>
	int THM_data = ADC1->DR;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <readData+0xb8>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	607b      	str	r3, [r7, #4]

	ADC1->CR |= ADC_CR_ADSTART;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <readData+0xb8>)
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <readData+0xb8>)
 800066e:	2104      	movs	r1, #4
 8000670:	430a      	orrs	r2, r1
 8000672:	609a      	str	r2, [r3, #8]
	while ((ADC1->ISR & ADC_ISR_EOSEQ) == 0b0);
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <readData+0xb8>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2208      	movs	r2, #8
 800067c:	4013      	ands	r3, r2
 800067e:	d0fa      	beq.n	8000676 <readData+0x9e>
	int POT_data = ADC1->DR;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <readData+0xb8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	603b      	str	r3, [r7, #0]

//	return "";
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	40012400 	.word	0x40012400

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_MspInit+0x44>)
 80006a8:	699a      	ldr	r2, [r3, #24]
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_MspInit+0x44>)
 80006ac:	2101      	movs	r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	619a      	str	r2, [r3, #24]
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x44>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	2201      	movs	r2, #1
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x44>)
 80006c0:	69da      	ldr	r2, [r3, #28]
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <HAL_MspInit+0x44>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0549      	lsls	r1, r1, #21
 80006c8:	430a      	orrs	r2, r1
 80006ca:	61da      	str	r2, [r3, #28]
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_MspInit+0x44>)
 80006ce:	69da      	ldr	r2, [r3, #28]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	055b      	lsls	r3, r3, #21
 80006d4:	4013      	ands	r3, r2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b08b      	sub	sp, #44	; 0x2c
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	2414      	movs	r4, #20
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0018      	movs	r0, r3
 80006f6:	2314      	movs	r3, #20
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f001 fb96 	bl	8001e2c <memset>
  if(hadc->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a18      	ldr	r2, [pc, #96]	; (8000768 <HAL_ADC_MspInit+0x80>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d12a      	bne.n	8000760 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_ADC_MspInit+0x84>)
 800070c:	699a      	ldr	r2, [r3, #24]
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <HAL_ADC_MspInit+0x84>)
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0089      	lsls	r1, r1, #2
 8000714:	430a      	orrs	r2, r1
 8000716:	619a      	str	r2, [r3, #24]
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_ADC_MspInit+0x84>)
 800071a:	699a      	ldr	r2, [r3, #24]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4013      	ands	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <HAL_ADC_MspInit+0x84>)
 8000728:	695a      	ldr	r2, [r3, #20]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_ADC_MspInit+0x84>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	02c9      	lsls	r1, r1, #11
 8000730:	430a      	orrs	r2, r1
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_ADC_MspInit+0x84>)
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	02db      	lsls	r3, r3, #11
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2203      	movs	r2, #3
 8000746:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2203      	movs	r2, #3
 800074c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	193b      	adds	r3, r7, r4
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_ADC_MspInit+0x88>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f000 fc52 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b00b      	add	sp, #44	; 0x2c
 8000766:	bd90      	pop	{r4, r7, pc}
 8000768:	40012400 	.word	0x40012400
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400

08000774 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b08b      	sub	sp, #44	; 0x2c
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	2414      	movs	r4, #20
 800077e:	193b      	adds	r3, r7, r4
 8000780:	0018      	movs	r0, r3
 8000782:	2314      	movs	r3, #20
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f001 fb50 	bl	8001e2c <memset>
  if(hi2c->Instance==I2C1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <HAL_I2C_MspInit+0x90>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d132      	bne.n	80007fc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <HAL_I2C_MspInit+0x94>)
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <HAL_I2C_MspInit+0x94>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	02c9      	lsls	r1, r1, #11
 80007a0:	430a      	orrs	r2, r1
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_I2C_MspInit+0x94>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	02db      	lsls	r3, r3, #11
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	22c0      	movs	r2, #192	; 0xc0
 80007b6:	0092      	lsls	r2, r2, #2
 80007b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ba:	0021      	movs	r1, r4
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2212      	movs	r2, #18
 80007c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2203      	movs	r2, #3
 80007cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	4a0d      	ldr	r2, [pc, #52]	; (800080c <HAL_I2C_MspInit+0x98>)
 80007d8:	0019      	movs	r1, r3
 80007da:	0010      	movs	r0, r2
 80007dc:	f000 fc12 	bl	8001004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_I2C_MspInit+0x94>)
 80007e2:	69da      	ldr	r2, [r3, #28]
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_I2C_MspInit+0x94>)
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	0389      	lsls	r1, r1, #14
 80007ea:	430a      	orrs	r2, r1
 80007ec:	61da      	str	r2, [r3, #28]
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_I2C_MspInit+0x94>)
 80007f0:	69da      	ldr	r2, [r3, #28]
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	039b      	lsls	r3, r3, #14
 80007f6:	4013      	ands	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b00b      	add	sp, #44	; 0x2c
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	40005400 	.word	0x40005400
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b08b      	sub	sp, #44	; 0x2c
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	2414      	movs	r4, #20
 800081a:	193b      	adds	r3, r7, r4
 800081c:	0018      	movs	r0, r3
 800081e:	2314      	movs	r3, #20
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f001 fb02 	bl	8001e2c <memset>
  if(huart->Instance==USART1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <HAL_UART_MspInit+0x90>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d131      	bne.n	8000896 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_UART_MspInit+0x94>)
 8000834:	699a      	ldr	r2, [r3, #24]
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_UART_MspInit+0x94>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	01c9      	lsls	r1, r1, #7
 800083c:	430a      	orrs	r2, r1
 800083e:	619a      	str	r2, [r3, #24]
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_UART_MspInit+0x94>)
 8000842:	699a      	ldr	r2, [r3, #24]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	01db      	lsls	r3, r3, #7
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_UART_MspInit+0x94>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_UART_MspInit+0x94>)
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	02c9      	lsls	r1, r1, #11
 8000858:	430a      	orrs	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_UART_MspInit+0x94>)
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	02db      	lsls	r3, r3, #11
 8000864:	4013      	ands	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800086a:	0021      	movs	r1, r4
 800086c:	187b      	adds	r3, r7, r1
 800086e:	22c0      	movs	r2, #192	; 0xc0
 8000870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2202      	movs	r2, #2
 8000876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2203      	movs	r2, #3
 8000882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	187b      	adds	r3, r7, r1
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <HAL_UART_MspInit+0x98>)
 800088e:	0019      	movs	r1, r3
 8000890:	0010      	movs	r0, r2
 8000892:	f000 fbb7 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b00b      	add	sp, #44	; 0x2c
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40013800 	.word	0x40013800
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000400 	.word	0x48000400

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f87a 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008de:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80008e0:	f000 f825 	bl	800092e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800090a:	f001 fa6b 	bl	8001de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090e:	f7ff fc87 	bl	8000220 <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   r0, =_estack
 8000914:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000920:	08001e84 	.word	0x08001e84
  ldr r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000928:	20000148 	.word	0x20000148

0800092c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_COMP_IRQHandler>

0800092e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <HAL_Init+0x24>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_Init+0x24>)
 8000942:	2110      	movs	r1, #16
 8000944:	430a      	orrs	r2, r1
 8000946:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f809 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094e:	f7ff fea7 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_InitTick+0x5c>)
 800096a:	681c      	ldr	r4, [r3, #0]
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_InitTick+0x60>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	0019      	movs	r1, r3
 8000972:	23fa      	movs	r3, #250	; 0xfa
 8000974:	0098      	lsls	r0, r3, #2
 8000976:	f7ff fbc7 	bl	8000108 <__udivsi3>
 800097a:	0003      	movs	r3, r0
 800097c:	0019      	movs	r1, r3
 800097e:	0020      	movs	r0, r4
 8000980:	f7ff fbc2 	bl	8000108 <__udivsi3>
 8000984:	0003      	movs	r3, r0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fb2f 	bl	8000fea <HAL_SYSTICK_Config>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e00f      	b.n	80009b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b03      	cmp	r3, #3
 8000998:	d80b      	bhi.n	80009b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	2301      	movs	r3, #1
 800099e:	425b      	negs	r3, r3
 80009a0:	2200      	movs	r2, #0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fb0c 	bl	8000fc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_InitTick+0x64>)
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	0018      	movs	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b003      	add	sp, #12
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	001a      	movs	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	18d2      	adds	r2, r2, r3
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_IncTick+0x20>)
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000144 	.word	0x20000144

080009ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <HAL_GetTick+0x10>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000144 	.word	0x20000144

08000a00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e125      	b.n	8000c6a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10a      	bne.n	8000a3c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2234      	movs	r2, #52	; 0x34
 8000a30:	2100      	movs	r1, #0
 8000a32:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fe56 	bl	80006e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a40:	2210      	movs	r2, #16
 8000a42:	4013      	ands	r3, r2
 8000a44:	d000      	beq.n	8000a48 <HAL_ADC_Init+0x48>
 8000a46:	e103      	b.n	8000c50 <HAL_ADC_Init+0x250>
 8000a48:	230f      	movs	r3, #15
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d000      	beq.n	8000a54 <HAL_ADC_Init+0x54>
 8000a52:	e0fd      	b.n	8000c50 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000a5e:	d000      	beq.n	8000a62 <HAL_ADC_Init+0x62>
 8000a60:	e0f6      	b.n	8000c50 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a66:	4a83      	ldr	r2, [pc, #524]	; (8000c74 <HAL_ADC_Init+0x274>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	2203      	movs	r2, #3
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d112      	bne.n	8000aa6 <HAL_ADC_Init+0xa6>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2201      	movs	r2, #1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d009      	beq.n	8000aa2 <HAL_ADC_Init+0xa2>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	401a      	ands	r2, r3
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d101      	bne.n	8000aa6 <HAL_ADC_Init+0xa6>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <HAL_ADC_Init+0xa8>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d116      	bne.n	8000ada <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	2218      	movs	r2, #24
 8000ab4:	4393      	bics	r3, r2
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	0899      	lsrs	r1, r3, #2
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4964      	ldr	r1, [pc, #400]	; (8000c78 <HAL_ADC_Init+0x278>)
 8000ae6:	400a      	ands	r2, r1
 8000ae8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7e1b      	ldrb	r3, [r3, #24]
 8000aee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7e5b      	ldrb	r3, [r3, #25]
 8000af4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000af6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7e9b      	ldrb	r3, [r3, #26]
 8000afc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000afe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d002      	beq.n	8000b0e <HAL_ADC_Init+0x10e>
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	015b      	lsls	r3, r3, #5
 8000b0c:	e000      	b.n	8000b10 <HAL_ADC_Init+0x110>
 8000b0e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b10:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b16:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d101      	bne.n	8000b24 <HAL_ADC_Init+0x124>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e000      	b.n	8000b26 <HAL_ADC_Init+0x126>
 8000b24:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000b26:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2124      	movs	r1, #36	; 0x24
 8000b2c:	5c5b      	ldrb	r3, [r3, r1]
 8000b2e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b30:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7edb      	ldrb	r3, [r3, #27]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d115      	bne.n	8000b6c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7e9b      	ldrb	r3, [r3, #26]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d105      	bne.n	8000b54 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	0252      	lsls	r2, r2, #9
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	e00b      	b.n	8000b6c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b58:	2220      	movs	r2, #32
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b64:	2201      	movs	r2, #1
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69da      	ldr	r2, [r3, #28]
 8000b70:	23c2      	movs	r3, #194	; 0xc2
 8000b72:	33ff      	adds	r3, #255	; 0xff
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d007      	beq.n	8000b88 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b80:	4313      	orrs	r3, r2
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68d9      	ldr	r1, [r3, #12]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	055b      	lsls	r3, r3, #21
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d01b      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d017      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d013      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d00f      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d00b      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	d007      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd0:	2b06      	cmp	r3, #6
 8000bd2:	d003      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd8:	2b07      	cmp	r3, #7
 8000bda:	d112      	bne.n	8000c02 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	695a      	ldr	r2, [r3, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2107      	movs	r1, #7
 8000be8:	438a      	bics	r2, r1
 8000bea:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6959      	ldr	r1, [r3, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf6:	2207      	movs	r2, #7
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <HAL_ADC_Init+0x27c>)
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d10b      	bne.n	8000c2a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	4393      	bics	r3, r2
 8000c20:	2201      	movs	r2, #1
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c28:	e01c      	b.n	8000c64 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2e:	2212      	movs	r2, #18
 8000c30:	4393      	bics	r3, r2
 8000c32:	2210      	movs	r2, #16
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3e:	2201      	movs	r2, #1
 8000c40:	431a      	orrs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000c46:	230f      	movs	r3, #15
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c4e:	e009      	b.n	8000c64 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c54:	2210      	movs	r2, #16
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
}
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	fffffefd 	.word	0xfffffefd
 8000c78:	fffe0219 	.word	0xfffe0219
 8000c7c:	833fffe7 	.word	0x833fffe7

08000c80 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	055b      	lsls	r3, r3, #21
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d011      	beq.n	8000cc6 <HAL_ADC_ConfigChannel+0x46>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d00d      	beq.n	8000cc6 <HAL_ADC_ConfigChannel+0x46>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d009      	beq.n	8000cc6 <HAL_ADC_ConfigChannel+0x46>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d005      	beq.n	8000cc6 <HAL_ADC_ConfigChannel+0x46>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d001      	beq.n	8000cc6 <HAL_ADC_ConfigChannel+0x46>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2234      	movs	r2, #52	; 0x34
 8000cca:	5c9b      	ldrb	r3, [r3, r2]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d101      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x54>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e0d0      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x1f6>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2234      	movs	r2, #52	; 0x34
 8000cd8:	2101      	movs	r1, #1
 8000cda:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d000      	beq.n	8000cea <HAL_ADC_ConfigChannel+0x6a>
 8000ce8:	e0b4      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4a64      	ldr	r2, [pc, #400]	; (8000e80 <HAL_ADC_ConfigChannel+0x200>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d100      	bne.n	8000cf6 <HAL_ADC_ConfigChannel+0x76>
 8000cf4:	e082      	b.n	8000dfc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2201      	movs	r2, #1
 8000d02:	409a      	lsls	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	055b      	lsls	r3, r3, #21
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d037      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d033      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d02f      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d02b      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	d027      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	d023      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d01f      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4c:	2b07      	cmp	r3, #7
 8000d4e:	d01b      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	2107      	movs	r1, #7
 8000d5c:	400b      	ands	r3, r1
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d012      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2107      	movs	r1, #7
 8000d6e:	438a      	bics	r2, r1
 8000d70:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6959      	ldr	r1, [r3, #20]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	401a      	ands	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b10      	cmp	r3, #16
 8000d8e:	d007      	beq.n	8000da0 <HAL_ADC_ConfigChannel+0x120>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b11      	cmp	r3, #17
 8000d96:	d003      	beq.n	8000da0 <HAL_ADC_ConfigChannel+0x120>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b12      	cmp	r3, #18
 8000d9e:	d163      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000da0:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <HAL_ADC_ConfigChannel+0x204>)
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b10      	cmp	r3, #16
 8000daa:	d009      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x140>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b11      	cmp	r3, #17
 8000db2:	d102      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x13a>
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	03db      	lsls	r3, r3, #15
 8000db8:	e004      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x144>
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	045b      	lsls	r3, r3, #17
 8000dbe:	e001      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x144>
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	041b      	lsls	r3, r3, #16
 8000dc4:	4a2f      	ldr	r2, [pc, #188]	; (8000e84 <HAL_ADC_ConfigChannel+0x204>)
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b10      	cmp	r3, #16
 8000dd0:	d14a      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <HAL_ADC_ConfigChannel+0x208>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	492d      	ldr	r1, [pc, #180]	; (8000e8c <HAL_ADC_ConfigChannel+0x20c>)
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff f995 	bl	8000108 <__udivsi3>
 8000dde:	0003      	movs	r3, r0
 8000de0:	001a      	movs	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	189b      	adds	r3, r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dec:	e002      	b.n	8000df4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f9      	bne.n	8000dee <HAL_ADC_ConfigChannel+0x16e>
 8000dfa:	e035      	b.n	8000e68 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2101      	movs	r1, #1
 8000e08:	4099      	lsls	r1, r3
 8000e0a:	000b      	movs	r3, r1
 8000e0c:	43d9      	mvns	r1, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	400a      	ands	r2, r1
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b10      	cmp	r3, #16
 8000e1c:	d007      	beq.n	8000e2e <HAL_ADC_ConfigChannel+0x1ae>
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b11      	cmp	r3, #17
 8000e24:	d003      	beq.n	8000e2e <HAL_ADC_ConfigChannel+0x1ae>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b12      	cmp	r3, #18
 8000e2c:	d11c      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_ADC_ConfigChannel+0x204>)
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b10      	cmp	r3, #16
 8000e38:	d007      	beq.n	8000e4a <HAL_ADC_ConfigChannel+0x1ca>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b11      	cmp	r3, #17
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_ConfigChannel+0x1c6>
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_ADC_ConfigChannel+0x210>)
 8000e44:	e002      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x1cc>
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_ADC_ConfigChannel+0x214>)
 8000e48:	e000      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x1cc>
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_ADC_ConfigChannel+0x218>)
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <HAL_ADC_ConfigChannel+0x204>)
 8000e4e:	400b      	ands	r3, r1
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e009      	b.n	8000e68 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e58:	2220      	movs	r2, #32
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000e60:	230f      	movs	r3, #15
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2234      	movs	r2, #52	; 0x34
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e70:	230f      	movs	r3, #15
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	781b      	ldrb	r3, [r3, #0]
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	00001001 	.word	0x00001001
 8000e84:	40012708 	.word	0x40012708
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	000f4240 	.word	0x000f4240
 8000e90:	ffbfffff 	.word	0xffbfffff
 8000e94:	feffffff 	.word	0xfeffffff
 8000e98:	ff7fffff 	.word	0xff7fffff

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb0:	d828      	bhi.n	8000f04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <__NVIC_SetPriority+0xd4>)
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	33c0      	adds	r3, #192	; 0xc0
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	589b      	ldr	r3, [r3, r2]
 8000ec2:	1dfa      	adds	r2, r7, #7
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	2203      	movs	r2, #3
 8000eca:	400a      	ands	r2, r1
 8000ecc:	00d2      	lsls	r2, r2, #3
 8000ece:	21ff      	movs	r1, #255	; 0xff
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	000a      	movs	r2, r1
 8000ed4:	43d2      	mvns	r2, r2
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	22ff      	movs	r2, #255	; 0xff
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	2303      	movs	r3, #3
 8000eea:	4003      	ands	r3, r0
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef0:	481f      	ldr	r0, [pc, #124]	; (8000f70 <__NVIC_SetPriority+0xd4>)
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	430a      	orrs	r2, r1
 8000efc:	33c0      	adds	r3, #192	; 0xc0
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f02:	e031      	b.n	8000f68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <__NVIC_SetPriority+0xd8>)
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	400b      	ands	r3, r1
 8000f10:	3b08      	subs	r3, #8
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3306      	adds	r3, #6
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1dfa      	adds	r2, r7, #7
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	0011      	movs	r1, r2
 8000f24:	2203      	movs	r2, #3
 8000f26:	400a      	ands	r2, r1
 8000f28:	00d2      	lsls	r2, r2, #3
 8000f2a:	21ff      	movs	r1, #255	; 0xff
 8000f2c:	4091      	lsls	r1, r2
 8000f2e:	000a      	movs	r2, r1
 8000f30:	43d2      	mvns	r2, r2
 8000f32:	401a      	ands	r2, r3
 8000f34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	019b      	lsls	r3, r3, #6
 8000f3a:	22ff      	movs	r2, #255	; 0xff
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	0018      	movs	r0, r3
 8000f44:	2303      	movs	r3, #3
 8000f46:	4003      	ands	r3, r0
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <__NVIC_SetPriority+0xd8>)
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	001c      	movs	r4, r3
 8000f54:	230f      	movs	r3, #15
 8000f56:	4023      	ands	r3, r4
 8000f58:	3b08      	subs	r3, #8
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	3306      	adds	r3, #6
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	18c3      	adds	r3, r0, r3
 8000f64:	3304      	adds	r3, #4
 8000f66:	601a      	str	r2, [r3, #0]
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b003      	add	sp, #12
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	045b      	lsls	r3, r3, #17
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d301      	bcc.n	8000f90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e010      	b.n	8000fb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <SysTick_Config+0x44>)
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	3a01      	subs	r2, #1
 8000f96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f98:	2301      	movs	r3, #1
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff ff7c 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x44>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x44>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	210f      	movs	r1, #15
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	1c02      	adds	r2, r0, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ffbf 	bl	8000f78 <SysTick_Config>
 8000ffa:	0003      	movs	r3, r0
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e14f      	b.n	80012b4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <HAL_GPIO_Init+0x28>
 800102a:	e140      	b.n	80012ae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	4013      	ands	r3, r2
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2203      	movs	r2, #3
 800103e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001040:	2b02      	cmp	r3, #2
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	409a      	lsls	r2, r3
 8001052:	0013      	movs	r3, r2
 8001054:	43da      	mvns	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	409a      	lsls	r2, r3
 8001066:	0013      	movs	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	43da      	mvns	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	2201      	movs	r2, #1
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2203      	movs	r2, #3
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d017      	beq.n	80010e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2203      	movs	r2, #3
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d123      	bne.n	8001136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	58d3      	ldr	r3, [r2, r3]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2207      	movs	r2, #7
 8001100:	4013      	ands	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2107      	movs	r1, #7
 800111a:	400b      	ands	r3, r1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	6939      	ldr	r1, [r7, #16]
 8001134:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	43da      	mvns	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	401a      	ands	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	23c0      	movs	r3, #192	; 0xc0
 8001170:	029b      	lsls	r3, r3, #10
 8001172:	4013      	ands	r3, r2
 8001174:	d100      	bne.n	8001178 <HAL_GPIO_Init+0x174>
 8001176:	e09a      	b.n	80012ae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <HAL_GPIO_Init+0x2c8>)
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <HAL_GPIO_Init+0x2c8>)
 800117e:	2101      	movs	r1, #1
 8001180:	430a      	orrs	r2, r1
 8001182:	619a      	str	r2, [r3, #24]
 8001184:	4b51      	ldr	r3, [pc, #324]	; (80012cc <HAL_GPIO_Init+0x2c8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	2201      	movs	r2, #1
 800118a:	4013      	ands	r3, r2
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001190:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	589b      	ldr	r3, [r3, r2]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2203      	movs	r2, #3
 80011a2:	4013      	ands	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	43da      	mvns	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	2390      	movs	r3, #144	; 0x90
 80011b8:	05db      	lsls	r3, r3, #23
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a44      	ldr	r2, [pc, #272]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x1de>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a43      	ldr	r2, [pc, #268]	; (80012d8 <HAL_GPIO_Init+0x2d4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x1da>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a42      	ldr	r2, [pc, #264]	; (80012dc <HAL_GPIO_Init+0x2d8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x1d6>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011da:	2305      	movs	r3, #5
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011e6:	2300      	movs	r3, #0
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	2103      	movs	r1, #3
 80011ec:	400a      	ands	r2, r1
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f8:	4935      	ldr	r1, [pc, #212]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	035b      	lsls	r3, r3, #13
 800121e:	4013      	ands	r3, r2
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800122a:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	039b      	lsls	r3, r3, #14
 8001248:	4013      	ands	r3, r2
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	029b      	lsls	r3, r3, #10
 8001272:	4013      	ands	r3, r2
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	025b      	lsls	r3, r3, #9
 800129c:	4013      	ands	r3, r2
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	40da      	lsrs	r2, r3
 80012bc:	1e13      	subs	r3, r2, #0
 80012be:	d000      	beq.n	80012c2 <HAL_GPIO_Init+0x2be>
 80012c0:	e6a8      	b.n	8001014 <HAL_GPIO_Init+0x10>
  } 
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b006      	add	sp, #24
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000800 	.word	0x48000800
 80012dc:	48000c00 	.word	0x48000c00
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	0008      	movs	r0, r1
 80012ee:	0011      	movs	r1, r2
 80012f0:	1cbb      	adds	r3, r7, #2
 80012f2:	1c02      	adds	r2, r0, #0
 80012f4:	801a      	strh	r2, [r3, #0]
 80012f6:	1c7b      	adds	r3, r7, #1
 80012f8:	1c0a      	adds	r2, r1, #0
 80012fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012fc:	1c7b      	adds	r3, r7, #1
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001304:	1cbb      	adds	r3, r7, #2
 8001306:	881a      	ldrh	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800130c:	e003      	b.n	8001316 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130e:	1cbb      	adds	r3, r7, #2
 8001310:	881a      	ldrh	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e082      	b.n	8001438 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2241      	movs	r2, #65	; 0x41
 8001336:	5c9b      	ldrb	r3, [r3, r2]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d107      	bne.n	800134e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2240      	movs	r2, #64	; 0x40
 8001342:	2100      	movs	r1, #0
 8001344:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fa13 	bl	8000774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2241      	movs	r2, #65	; 0x41
 8001352:	2124      	movs	r1, #36	; 0x24
 8001354:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	438a      	bics	r2, r1
 8001364:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4934      	ldr	r1, [pc, #208]	; (8001440 <HAL_I2C_Init+0x120>)
 8001370:	400a      	ands	r2, r1
 8001372:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4931      	ldr	r1, [pc, #196]	; (8001444 <HAL_I2C_Init+0x124>)
 8001380:	400a      	ands	r2, r1
 8001382:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d108      	bne.n	800139e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0209      	lsls	r1, r1, #8
 8001398:	430a      	orrs	r2, r1
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	e007      	b.n	80013ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2184      	movs	r1, #132	; 0x84
 80013a8:	0209      	lsls	r1, r1, #8
 80013aa:	430a      	orrs	r2, r1
 80013ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d104      	bne.n	80013c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	491f      	ldr	r1, [pc, #124]	; (8001448 <HAL_I2C_Init+0x128>)
 80013cc:	430a      	orrs	r2, r1
 80013ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	491a      	ldr	r1, [pc, #104]	; (8001444 <HAL_I2C_Init+0x124>)
 80013dc:	400a      	ands	r2, r1
 80013de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	431a      	orrs	r2, r3
 80013ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69d9      	ldr	r1, [r3, #28]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1a      	ldr	r2, [r3, #32]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2101      	movs	r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2241      	movs	r2, #65	; 0x41
 8001424:	2120      	movs	r1, #32
 8001426:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2242      	movs	r2, #66	; 0x42
 8001432:	2100      	movs	r1, #0
 8001434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}
 8001440:	f0ffffff 	.word	0xf0ffffff
 8001444:	ffff7fff 	.word	0xffff7fff
 8001448:	02008000 	.word	0x02008000

0800144c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2241      	movs	r2, #65	; 0x41
 800145a:	5c9b      	ldrb	r3, [r3, r2]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b20      	cmp	r3, #32
 8001460:	d138      	bne.n	80014d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2240      	movs	r2, #64	; 0x40
 8001466:	5c9b      	ldrb	r3, [r3, r2]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800146c:	2302      	movs	r3, #2
 800146e:	e032      	b.n	80014d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2240      	movs	r2, #64	; 0x40
 8001474:	2101      	movs	r1, #1
 8001476:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2241      	movs	r2, #65	; 0x41
 800147c:	2124      	movs	r1, #36	; 0x24
 800147e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2101      	movs	r1, #1
 800148c:	438a      	bics	r2, r1
 800148e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4911      	ldr	r1, [pc, #68]	; (80014e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6819      	ldr	r1, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2241      	movs	r2, #65	; 0x41
 80014c4:	2120      	movs	r1, #32
 80014c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	2100      	movs	r1, #0
 80014ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e000      	b.n	80014d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014d4:	2302      	movs	r3, #2
  }
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	ffffefff 	.word	0xffffefff

080014e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2241      	movs	r2, #65	; 0x41
 80014f2:	5c9b      	ldrb	r3, [r3, r2]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b20      	cmp	r3, #32
 80014f8:	d139      	bne.n	800156e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2240      	movs	r2, #64	; 0x40
 80014fe:	5c9b      	ldrb	r3, [r3, r2]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001504:	2302      	movs	r3, #2
 8001506:	e033      	b.n	8001570 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2240      	movs	r2, #64	; 0x40
 800150c:	2101      	movs	r1, #1
 800150e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2241      	movs	r2, #65	; 0x41
 8001514:	2124      	movs	r1, #36	; 0x24
 8001516:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2101      	movs	r1, #1
 8001524:	438a      	bics	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001534:	4013      	ands	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2101      	movs	r1, #1
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2241      	movs	r2, #65	; 0x41
 800155e:	2120      	movs	r1, #32
 8001560:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2240      	movs	r2, #64	; 0x40
 8001566:	2100      	movs	r1, #0
 8001568:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800156e:	2302      	movs	r3, #2
  }
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b004      	add	sp, #16
 8001576:	bd80      	pop	{r7, pc}
 8001578:	fffff0ff 	.word	0xfffff0ff

0800157c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	220c      	movs	r2, #12
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d002      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x30>
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d003      	beq.n	80015b2 <HAL_RCC_GetSysClockFreq+0x36>
 80015aa:	e02c      	b.n	8001606 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ae:	613b      	str	r3, [r7, #16]
      break;
 80015b0:	e02c      	b.n	800160c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	0c9b      	lsrs	r3, r3, #18
 80015b6:	220f      	movs	r2, #15
 80015b8:	4013      	ands	r3, r2
 80015ba:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	220f      	movs	r2, #15
 80015c6:	4013      	ands	r3, r2
 80015c8:	4a16      	ldr	r2, [pc, #88]	; (8001624 <HAL_RCC_GetSysClockFreq+0xa8>)
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	025b      	lsls	r3, r3, #9
 80015d4:	4013      	ands	r3, r2
 80015d6:	d009      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <HAL_RCC_GetSysClockFreq+0xa0>)
 80015dc:	f7fe fd94 	bl	8000108 <__udivsi3>
 80015e0:	0003      	movs	r3, r0
 80015e2:	001a      	movs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4353      	muls	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e009      	b.n	8001600 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	000a      	movs	r2, r1
 80015f0:	0152      	lsls	r2, r2, #5
 80015f2:	1a52      	subs	r2, r2, r1
 80015f4:	0193      	lsls	r3, r2, #6
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	185b      	adds	r3, r3, r1
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
      break;
 8001604:	e002      	b.n	800160c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001608:	613b      	str	r3, [r7, #16]
      break;
 800160a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800160c:	693b      	ldr	r3, [r7, #16]
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b006      	add	sp, #24
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	40021000 	.word	0x40021000
 800161c:	007a1200 	.word	0x007a1200
 8001620:	08001e5c 	.word	0x08001e5c
 8001624:	08001e6c 	.word	0x08001e6c

08001628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <HAL_RCC_GetHCLKFreq+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	20000000 	.word	0x20000000

0800163c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001640:	f7ff fff2 	bl	8001628 <HAL_RCC_GetHCLKFreq>
 8001644:	0001      	movs	r1, r0
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	2207      	movs	r2, #7
 800164e:	4013      	ands	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	40d9      	lsrs	r1, r3
 8001656:	000b      	movs	r3, r1
}    
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	40021000 	.word	0x40021000
 8001664:	08001e54 	.word	0x08001e54

08001668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e044      	b.n	8001704 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800167e:	2b00      	cmp	r3, #0
 8001680:	d107      	bne.n	8001692 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2278      	movs	r2, #120	; 0x78
 8001686:	2100      	movs	r1, #0
 8001688:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff f8bf 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2224      	movs	r2, #36	; 0x24
 8001696:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2101      	movs	r1, #1
 80016a4:	438a      	bics	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	0018      	movs	r0, r3
 80016ac:	f000 f830 	bl	8001710 <UART_SetConfig>
 80016b0:	0003      	movs	r3, r0
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e024      	b.n	8001704 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 f963 	bl	8001990 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	490d      	ldr	r1, [pc, #52]	; (800170c <HAL_UART_Init+0xa4>)
 80016d6:	400a      	ands	r2, r1
 80016d8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	212a      	movs	r1, #42	; 0x2a
 80016e6:	438a      	bics	r2, r1
 80016e8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 f9fb 	bl	8001af8 <UART_CheckIdleState>
 8001702:	0003      	movs	r3, r0
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b002      	add	sp, #8
 800170a:	bd80      	pop	{r7, pc}
 800170c:	ffffb7ff 	.word	0xffffb7ff

08001710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001718:	231e      	movs	r3, #30
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a8d      	ldr	r2, [pc, #564]	; (8001974 <UART_SetConfig+0x264>)
 8001740:	4013      	ands	r3, r2
 8001742:	0019      	movs	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a88      	ldr	r2, [pc, #544]	; (8001978 <UART_SetConfig+0x268>)
 8001756:	4013      	ands	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	4313      	orrs	r3, r2
 8001774:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a7f      	ldr	r2, [pc, #508]	; (800197c <UART_SetConfig+0x26c>)
 800177e:	4013      	ands	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	430a      	orrs	r2, r1
 800178a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a7b      	ldr	r2, [pc, #492]	; (8001980 <UART_SetConfig+0x270>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d127      	bne.n	80017e6 <UART_SetConfig+0xd6>
 8001796:	4b7b      	ldr	r3, [pc, #492]	; (8001984 <UART_SetConfig+0x274>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	2203      	movs	r2, #3
 800179c:	4013      	ands	r3, r2
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d00d      	beq.n	80017be <UART_SetConfig+0xae>
 80017a2:	d81b      	bhi.n	80017dc <UART_SetConfig+0xcc>
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d014      	beq.n	80017d2 <UART_SetConfig+0xc2>
 80017a8:	d818      	bhi.n	80017dc <UART_SetConfig+0xcc>
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <UART_SetConfig+0xa4>
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d00a      	beq.n	80017c8 <UART_SetConfig+0xb8>
 80017b2:	e013      	b.n	80017dc <UART_SetConfig+0xcc>
 80017b4:	231f      	movs	r3, #31
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e021      	b.n	8001802 <UART_SetConfig+0xf2>
 80017be:	231f      	movs	r3, #31
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	2202      	movs	r2, #2
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e01c      	b.n	8001802 <UART_SetConfig+0xf2>
 80017c8:	231f      	movs	r3, #31
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	2204      	movs	r2, #4
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	e017      	b.n	8001802 <UART_SetConfig+0xf2>
 80017d2:	231f      	movs	r3, #31
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	2208      	movs	r2, #8
 80017d8:	701a      	strb	r2, [r3, #0]
 80017da:	e012      	b.n	8001802 <UART_SetConfig+0xf2>
 80017dc:	231f      	movs	r3, #31
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2210      	movs	r2, #16
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	e00d      	b.n	8001802 <UART_SetConfig+0xf2>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a67      	ldr	r2, [pc, #412]	; (8001988 <UART_SetConfig+0x278>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d104      	bne.n	80017fa <UART_SetConfig+0xea>
 80017f0:	231f      	movs	r3, #31
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e003      	b.n	8001802 <UART_SetConfig+0xf2>
 80017fa:	231f      	movs	r3, #31
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	2210      	movs	r2, #16
 8001800:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	429a      	cmp	r2, r3
 800180c:	d15c      	bne.n	80018c8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800180e:	231f      	movs	r3, #31
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b08      	cmp	r3, #8
 8001816:	d015      	beq.n	8001844 <UART_SetConfig+0x134>
 8001818:	dc18      	bgt.n	800184c <UART_SetConfig+0x13c>
 800181a:	2b04      	cmp	r3, #4
 800181c:	d00d      	beq.n	800183a <UART_SetConfig+0x12a>
 800181e:	dc15      	bgt.n	800184c <UART_SetConfig+0x13c>
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <UART_SetConfig+0x11a>
 8001824:	2b02      	cmp	r3, #2
 8001826:	d005      	beq.n	8001834 <UART_SetConfig+0x124>
 8001828:	e010      	b.n	800184c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800182a:	f7ff ff07 	bl	800163c <HAL_RCC_GetPCLK1Freq>
 800182e:	0003      	movs	r3, r0
 8001830:	61bb      	str	r3, [r7, #24]
        break;
 8001832:	e012      	b.n	800185a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001834:	4b55      	ldr	r3, [pc, #340]	; (800198c <UART_SetConfig+0x27c>)
 8001836:	61bb      	str	r3, [r7, #24]
        break;
 8001838:	e00f      	b.n	800185a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800183a:	f7ff fe9f 	bl	800157c <HAL_RCC_GetSysClockFreq>
 800183e:	0003      	movs	r3, r0
 8001840:	61bb      	str	r3, [r7, #24]
        break;
 8001842:	e00a      	b.n	800185a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	61bb      	str	r3, [r7, #24]
        break;
 800184a:	e006      	b.n	800185a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001850:	231e      	movs	r3, #30
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
        break;
 8001858:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d100      	bne.n	8001862 <UART_SetConfig+0x152>
 8001860:	e07a      	b.n	8001958 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	005a      	lsls	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	18d2      	adds	r2, r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	0019      	movs	r1, r3
 8001874:	0010      	movs	r0, r2
 8001876:	f7fe fc47 	bl	8000108 <__udivsi3>
 800187a:	0003      	movs	r3, r0
 800187c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d91c      	bls.n	80018be <UART_SetConfig+0x1ae>
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	429a      	cmp	r2, r3
 800188c:	d217      	bcs.n	80018be <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	b29a      	uxth	r2, r3
 8001892:	200e      	movs	r0, #14
 8001894:	183b      	adds	r3, r7, r0
 8001896:	210f      	movs	r1, #15
 8001898:	438a      	bics	r2, r1
 800189a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	2207      	movs	r2, #7
 80018a4:	4013      	ands	r3, r2
 80018a6:	b299      	uxth	r1, r3
 80018a8:	183b      	adds	r3, r7, r0
 80018aa:	183a      	adds	r2, r7, r0
 80018ac:	8812      	ldrh	r2, [r2, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	183a      	adds	r2, r7, r0
 80018b8:	8812      	ldrh	r2, [r2, #0]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	e04c      	b.n	8001958 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80018be:	231e      	movs	r3, #30
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	e047      	b.n	8001958 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80018c8:	231f      	movs	r3, #31
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d015      	beq.n	80018fe <UART_SetConfig+0x1ee>
 80018d2:	dc18      	bgt.n	8001906 <UART_SetConfig+0x1f6>
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d00d      	beq.n	80018f4 <UART_SetConfig+0x1e4>
 80018d8:	dc15      	bgt.n	8001906 <UART_SetConfig+0x1f6>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <UART_SetConfig+0x1d4>
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d005      	beq.n	80018ee <UART_SetConfig+0x1de>
 80018e2:	e010      	b.n	8001906 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80018e4:	f7ff feaa 	bl	800163c <HAL_RCC_GetPCLK1Freq>
 80018e8:	0003      	movs	r3, r0
 80018ea:	61bb      	str	r3, [r7, #24]
        break;
 80018ec:	e012      	b.n	8001914 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <UART_SetConfig+0x27c>)
 80018f0:	61bb      	str	r3, [r7, #24]
        break;
 80018f2:	e00f      	b.n	8001914 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80018f4:	f7ff fe42 	bl	800157c <HAL_RCC_GetSysClockFreq>
 80018f8:	0003      	movs	r3, r0
 80018fa:	61bb      	str	r3, [r7, #24]
        break;
 80018fc:	e00a      	b.n	8001914 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	61bb      	str	r3, [r7, #24]
        break;
 8001904:	e006      	b.n	8001914 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800190a:	231e      	movs	r3, #30
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
        break;
 8001912:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01e      	beq.n	8001958 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	085a      	lsrs	r2, r3, #1
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	18d2      	adds	r2, r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	0019      	movs	r1, r3
 800192a:	0010      	movs	r0, r2
 800192c:	f7fe fbec 	bl	8000108 <__udivsi3>
 8001930:	0003      	movs	r3, r0
 8001932:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	d90a      	bls.n	8001950 <UART_SetConfig+0x240>
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	025b      	lsls	r3, r3, #9
 8001940:	429a      	cmp	r2, r3
 8001942:	d205      	bcs.n	8001950 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	b29a      	uxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	e003      	b.n	8001958 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001950:	231e      	movs	r3, #30
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001964:	231e      	movs	r3, #30
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	781b      	ldrb	r3, [r3, #0]
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b008      	add	sp, #32
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	ffff69f3 	.word	0xffff69f3
 8001978:	ffffcfff 	.word	0xffffcfff
 800197c:	fffff4ff 	.word	0xfffff4ff
 8001980:	40013800 	.word	0x40013800
 8001984:	40021000 	.word	0x40021000
 8001988:	40004400 	.word	0x40004400
 800198c:	007a1200 	.word	0x007a1200

08001990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2201      	movs	r2, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	d00b      	beq.n	80019ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a4a      	ldr	r2, [pc, #296]	; (8001ad4 <UART_AdvFeatureConfig+0x144>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	2202      	movs	r2, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d00b      	beq.n	80019dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4a43      	ldr	r2, [pc, #268]	; (8001ad8 <UART_AdvFeatureConfig+0x148>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	2204      	movs	r2, #4
 80019e2:	4013      	ands	r3, r2
 80019e4:	d00b      	beq.n	80019fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4a3b      	ldr	r2, [pc, #236]	; (8001adc <UART_AdvFeatureConfig+0x14c>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	2208      	movs	r2, #8
 8001a04:	4013      	ands	r3, r2
 8001a06:	d00b      	beq.n	8001a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4a34      	ldr	r2, [pc, #208]	; (8001ae0 <UART_AdvFeatureConfig+0x150>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	0019      	movs	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	2210      	movs	r2, #16
 8001a26:	4013      	ands	r3, r2
 8001a28:	d00b      	beq.n	8001a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <UART_AdvFeatureConfig+0x154>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	0019      	movs	r1, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	2220      	movs	r2, #32
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d00b      	beq.n	8001a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4a25      	ldr	r2, [pc, #148]	; (8001ae8 <UART_AdvFeatureConfig+0x158>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	2240      	movs	r2, #64	; 0x40
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d01d      	beq.n	8001aaa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <UART_AdvFeatureConfig+0x15c>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	035b      	lsls	r3, r3, #13
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d10b      	bne.n	8001aaa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <UART_AdvFeatureConfig+0x160>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d00b      	beq.n	8001acc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <UART_AdvFeatureConfig+0x164>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	605a      	str	r2, [r3, #4]
  }
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	fffdffff 	.word	0xfffdffff
 8001ad8:	fffeffff 	.word	0xfffeffff
 8001adc:	fffbffff 	.word	0xfffbffff
 8001ae0:	ffff7fff 	.word	0xffff7fff
 8001ae4:	ffffefff 	.word	0xffffefff
 8001ae8:	ffffdfff 	.word	0xffffdfff
 8001aec:	ffefffff 	.word	0xffefffff
 8001af0:	ff9fffff 	.word	0xff9fffff
 8001af4:	fff7ffff 	.word	0xfff7ffff

08001af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b092      	sub	sp, #72	; 0x48
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2284      	movs	r2, #132	; 0x84
 8001b04:	2100      	movs	r1, #0
 8001b06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001b08:	f7fe ff70 	bl	80009ec <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2208      	movs	r2, #8
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d12c      	bne.n	8001b78 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	0391      	lsls	r1, r2, #14
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4a46      	ldr	r2, [pc, #280]	; (8001c40 <UART_CheckIdleState+0x148>)
 8001b28:	9200      	str	r2, [sp, #0]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f000 f88c 	bl	8001c48 <UART_WaitOnFlagUntilTimeout>
 8001b30:	1e03      	subs	r3, r0, #0
 8001b32:	d021      	beq.n	8001b78 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b34:	f3ef 8310 	mrs	r3, PRIMASK
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b3e:	2301      	movs	r3, #1
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b44:	f383 8810 	msr	PRIMASK, r3
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	438a      	bics	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	f383 8810 	msr	PRIMASK, r3
}
 8001b64:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2278      	movs	r2, #120	; 0x78
 8001b70:	2100      	movs	r1, #0
 8001b72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e05f      	b.n	8001c38 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d146      	bne.n	8001c14 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	03d1      	lsls	r1, r2, #15
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4a2c      	ldr	r2, [pc, #176]	; (8001c40 <UART_CheckIdleState+0x148>)
 8001b90:	9200      	str	r2, [sp, #0]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f000 f858 	bl	8001c48 <UART_WaitOnFlagUntilTimeout>
 8001b98:	1e03      	subs	r3, r0, #0
 8001b9a:	d03b      	beq.n	8001c14 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	f383 8810 	msr	PRIMASK, r3
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4921      	ldr	r1, [pc, #132]	; (8001c44 <UART_CheckIdleState+0x14c>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f383 8810 	msr	PRIMASK, r3
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bce:	f3ef 8310 	mrs	r3, PRIMASK
 8001bd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8001bd4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f383 8810 	msr	PRIMASK, r3
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	438a      	bics	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f383 8810 	msr	PRIMASK, r3
}
 8001bfe:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	2120      	movs	r1, #32
 8001c06:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2278      	movs	r2, #120	; 0x78
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e011      	b.n	8001c38 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	2120      	movs	r1, #32
 8001c20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2278      	movs	r2, #120	; 0x78
 8001c32:	2100      	movs	r1, #0
 8001c34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b010      	add	sp, #64	; 0x40
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	01ffffff 	.word	0x01ffffff
 8001c44:	fffffedf 	.word	0xfffffedf

08001c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	1dfb      	adds	r3, r7, #7
 8001c56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c58:	e04b      	b.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	d048      	beq.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c60:	f7fe fec4 	bl	80009ec <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d302      	bcc.n	8001c76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e04b      	b.n	8001d12 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2204      	movs	r2, #4
 8001c82:	4013      	ands	r3, r2
 8001c84:	d035      	beq.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d111      	bne.n	8001cb8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2208      	movs	r2, #8
 8001c9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 f83c 	bl	8001d1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2284      	movs	r2, #132	; 0x84
 8001ca8:	2108      	movs	r1, #8
 8001caa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2278      	movs	r2, #120	; 0x78
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e02c      	b.n	8001d12 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69da      	ldr	r2, [r3, #28]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d112      	bne.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f000 f81f 	bl	8001d1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2284      	movs	r2, #132	; 0x84
 8001ce2:	2120      	movs	r1, #32
 8001ce4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2278      	movs	r2, #120	; 0x78
 8001cea:	2100      	movs	r1, #0
 8001cec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e00f      	b.n	8001d12 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	425a      	negs	r2, r3
 8001d02:	4153      	adcs	r3, r2
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	001a      	movs	r2, r3
 8001d08:	1dfb      	adds	r3, r7, #7
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d0a4      	beq.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	0018      	movs	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b004      	add	sp, #16
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d24:	f3ef 8310 	mrs	r3, PRIMASK
 8001d28:	617b      	str	r3, [r7, #20]
  return(result);
 8001d2a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f383 8810 	msr	PRIMASK, r3
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4926      	ldr	r1, [pc, #152]	; (8001de0 <UART_EndRxTransfer+0xc4>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f383 8810 	msr	PRIMASK, r3
}
 8001d54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d56:	f3ef 8310 	mrs	r3, PRIMASK
 8001d5a:	623b      	str	r3, [r7, #32]
  return(result);
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d60:	2301      	movs	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	f383 8810 	msr	PRIMASK, r3
}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2101      	movs	r1, #1
 8001d78:	438a      	bics	r2, r1
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	f383 8810 	msr	PRIMASK, r3
}
 8001d86:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d118      	bne.n	8001dc2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d90:	f3ef 8310 	mrs	r3, PRIMASK
 8001d94:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d96:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f383 8810 	msr	PRIMASK, r3
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2110      	movs	r1, #16
 8001db2:	438a      	bics	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f383 8810 	msr	PRIMASK, r3
}
 8001dc0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	2120      	movs	r1, #32
 8001dc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b00e      	add	sp, #56	; 0x38
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	fffffedf 	.word	0xfffffedf

08001de4 <__libc_init_array>:
 8001de4:	b570      	push	{r4, r5, r6, lr}
 8001de6:	2600      	movs	r6, #0
 8001de8:	4d0c      	ldr	r5, [pc, #48]	; (8001e1c <__libc_init_array+0x38>)
 8001dea:	4c0d      	ldr	r4, [pc, #52]	; (8001e20 <__libc_init_array+0x3c>)
 8001dec:	1b64      	subs	r4, r4, r5
 8001dee:	10a4      	asrs	r4, r4, #2
 8001df0:	42a6      	cmp	r6, r4
 8001df2:	d109      	bne.n	8001e08 <__libc_init_array+0x24>
 8001df4:	2600      	movs	r6, #0
 8001df6:	f000 f821 	bl	8001e3c <_init>
 8001dfa:	4d0a      	ldr	r5, [pc, #40]	; (8001e24 <__libc_init_array+0x40>)
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <__libc_init_array+0x44>)
 8001dfe:	1b64      	subs	r4, r4, r5
 8001e00:	10a4      	asrs	r4, r4, #2
 8001e02:	42a6      	cmp	r6, r4
 8001e04:	d105      	bne.n	8001e12 <__libc_init_array+0x2e>
 8001e06:	bd70      	pop	{r4, r5, r6, pc}
 8001e08:	00b3      	lsls	r3, r6, #2
 8001e0a:	58eb      	ldr	r3, [r5, r3]
 8001e0c:	4798      	blx	r3
 8001e0e:	3601      	adds	r6, #1
 8001e10:	e7ee      	b.n	8001df0 <__libc_init_array+0xc>
 8001e12:	00b3      	lsls	r3, r6, #2
 8001e14:	58eb      	ldr	r3, [r5, r3]
 8001e16:	4798      	blx	r3
 8001e18:	3601      	adds	r6, #1
 8001e1a:	e7f2      	b.n	8001e02 <__libc_init_array+0x1e>
 8001e1c:	08001e7c 	.word	0x08001e7c
 8001e20:	08001e7c 	.word	0x08001e7c
 8001e24:	08001e7c 	.word	0x08001e7c
 8001e28:	08001e80 	.word	0x08001e80

08001e2c <memset>:
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	1882      	adds	r2, r0, r2
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d100      	bne.n	8001e36 <memset+0xa>
 8001e34:	4770      	bx	lr
 8001e36:	7019      	strb	r1, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	e7f9      	b.n	8001e30 <memset+0x4>

08001e3c <_init>:
 8001e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e42:	bc08      	pop	{r3}
 8001e44:	469e      	mov	lr, r3
 8001e46:	4770      	bx	lr

08001e48 <_fini>:
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4e:	bc08      	pop	{r3}
 8001e50:	469e      	mov	lr, r3
 8001e52:	4770      	bx	lr
