/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DATA_THERMISTOR (0)
#define DATA_POTENTIOMETER (1)
#define DATA_LIGHT_ALL (2)
#define DATA_LIGHT_IR (3)

#define MODE_STANDBY (0)
#define MODE_RECORD_DATA (1)
#define MODE_READ_DATA (2)
#define MODE_LIVE_DATA (3)

//*LIGHT SENSOR */
//Slave addresses
#define LIGHT_ADDR (0x29 << 1)

//Control
#define LIGHT_CONTR (0x80)
#define LIGHT_CONTR_ACTIVE (0x1)

#define LIGHT_MEAS_RATE (0x85)
#define LIGHT_MEAS_RATE_100ms_50ms (0x00)

#define LIGHT_INTERRUPT (0x8F)
#define LIGHT_INTERRUPT_INTERRUPT_ON_MEASURE (0b0001010)

#define LIGHT_STATUS (0x8C)
#define LIGHT_STATUS_NEW_DATA (0x04)

//Data
#define LIGHT_DATA_1_0 (0x88)
#define LIGHT_DATA_1_1 (0x89)
#define LIGHT_DATA_0_0 (0x8A)
#define LIGHT_DATA_0_1 (0x8B)

//*LIGHT SENSOR END */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc;

I2C_HandleTypeDef hi2c1;

RTC_HandleTypeDef hrtc;

TIM_HandleTypeDef htim6;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
uint16_t data[4];
uint8_t plg_dtcted = 0, mode = 0, second_elapsed = 0;
RTC_TimeTypeDef time_ref;
const uint8_t START_PACKET[] = "<Packet Start>\r\n";
const uint8_t END_PACKET[] = "<Packet End>\r\r\n";
const uint8_t SENSOR_PREFIX[][20] = {"Thermistor:\t", "Potentiometer:\t", "Light (Visible):\t", "Light (Infrared):\t"};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC_Init(void);
static void MX_I2C1_Init(void);
static void MX_RTC_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC_Init();
  MX_I2C1_Init();
  MX_RTC_Init();
  MX_USART1_UART_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */
//  HAL_Delay(10000);

  //setup light sensor
  uint8_t buf[1];
  HAL_StatusTypeDef ref;
  HAL_Delay(200);
  ref = HAL_I2C_IsDeviceReady(&hi2c1, LIGHT_ADDR, 2, 1000);
  buf[0] = LIGHT_MEAS_RATE_100ms_50ms;
  ref = HAL_I2C_Mem_Write(&hi2c1, LIGHT_ADDR, LIGHT_MEAS_RATE, 1, buf, 1, 1000);
  HAL_Delay(10);

  HAL_TIM_Base_Start_IT(&htim6);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //handle plug detect
	  if ((GPIOB->IDR & GPIO_IDR_14) == GPIO_IDR_14) {
		  if (!plg_dtcted) {
			  HAL_UART_Transmit(&huart1, "Device Logged On\r\n", sizeof("Device Logged On\r\n"), 10);
			  plg_dtcted = 1;
		  }
	  } else if (plg_dtcted) plg_dtcted = 0;

	  //select mode
	  if ((GPIOB->IDR & GPIO_IDR_3) == 0b0){
		  //SW2 pressed
		  changeMode(MODE_RECORD_DATA);
	  }

	  if ((GPIOA->IDR & GPIO_IDR_15) == 0b0){
		  //SW3 pressed
		  changeMode(MODE_READ_DATA);
	  }

	  if ((GPIOB->IDR & GPIO_IDR_15) == 0b0){
		  //SW4 pressed
		  changeMode(MODE_LIVE_DATA);
	  }

	  switch (mode) {
	  	case MODE_STANDBY:
	  		if (second_elapsed < 1) break;
	  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
	  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	  		break;
	  	case MODE_LIVE_DATA:
	  		if (second_elapsed < 2) break;
	  		readData();
	  		transmitData();
	  		second_elapsed = 0;
	  		break;
	  	}


//	  if (data[DATA_POTENTIOMETER] > 0xfff/2) {
//		  GPIOB->ODR |= GPIO_ODR_12;
//	  } else {
//		  GPIOB->ODR &= ~(GPIO_ODR_12);
//	  }

//	  HAL_Delay(2000);
//	  readData();
//	  transmitData();

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ENABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = ENABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x0010020A;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 124;
  hrtc.Init.SynchPrediv = 1999;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
  sTime.Minutes = 0x35;
  sTime.Seconds = 0x35;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
  sDate.Month = RTC_MONTH_MAY;
  sDate.Date = 0x17;
  sDate.Year = 0x23;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 8000-1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 1000-1;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 38400;
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_EVEN;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB2 PB11 PB12 PB13
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB10 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void changeMode(int MODE_CODE) {
	mode = MODE_CODE;
	GPIOB->ODR &= ~(0b11 << 12); //turn off LEDs
	GPIOB->ODR |= (mode << 12);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6)
  {
	  second_elapsed++;
  }
}

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
//	setNextAlarm(2);
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

//	switch (mode) {
//	case MODE_STANDBY:
//		//todo Make light blink
//		if (data[DATA_POTENTIOMETER] > 0xfff/2) {
//			GPIOB->ODR |= GPIO_ODR_12;
//		} else {
//			GPIOB->ODR &= ~(GPIO_ODR_12);
//		}
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
//		break;
//	case MODE_LIVE_DATA:
//		readData();
//		transmitData();
//		break;
//	}

}

void setReferenceTime() {
	HAL_RTC_GetTime(&hrtc, &time_ref, RTC_FORMAT_BIN);
	if (time_ref.Seconds == 0b00) time_ref.Seconds = 60;
	if (time_ref.Minutes== 0b00) time_ref.Seconds = 60;
}



void readData(void) {
	//TODO TURN ON SENSORS
	//check calibration, if not calibrate
//	if ((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL) {
	ADC1->CR |= ADC_CR_ADCAL;
	while ((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL);
//	}
	//check if ADC is RDY
	if ((ADC1->ISR & ADC_ISR_ADRDY) == 0b0) {
		ADC1->CR |= ADC_CR_ADEN;
		while ((ADC1->ISR & ADC_ISR_ADRDY) == 0b0);
	}

	//read thermistor data 12-bit res
	ADC1->CR |= ADC_CR_ADSTART;
	while ((ADC1->ISR & ADC_ISR_EOC) == 0b0);
	data[DATA_THERMISTOR] = ADC1->DR;

	//read potentiometer data 12-bit res
	ADC1->CR |= ADC_CR_ADSTART;
	while ((ADC1->ISR & ADC_ISR_EOC) == 0b0);
	data[DATA_POTENTIOMETER] = ADC1->DR;
	ADC1->ISR &= ~(ADC_ISR_EOS);

	//stop ADC
	ADC1->CR |= ADC_CR_ADSTP;
	while ((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP);
	//disable ADC
	ADC1->CR |= ADC_CR_ADDIS;
	while ((ADC1->CR & ADC_CR_ADDIS) == ADC_CR_ADDIS);

	//I2C data retrieval
	uint8_t buf[1];
	HAL_StatusTypeDef ref;

	ref = HAL_I2C_IsDeviceReady(&hi2c1, LIGHT_ADDR, 2, 1000);
	HAL_Delay(10);

	//expected code
	buf[0] = LIGHT_CONTR_ACTIVE;
	ref = HAL_I2C_Mem_Write(&hi2c1, LIGHT_ADDR, LIGHT_CONTR, 1, buf, 1, 1000);

	//TODO wait until interrupt pin goes HIGH - that means device has data
	ref = HAL_I2C_Mem_Read(&hi2c1, LIGHT_ADDR, LIGHT_STATUS, 1, buf, 1, 1000);
	while ((buf[0] & LIGHT_STATUS_NEW_DATA) == 0b0) {
		HAL_Delay(20);
		ref = HAL_I2C_Mem_Read(&hi2c1, LIGHT_ADDR, LIGHT_STATUS, 1, buf, 1, 1000);
	}

	//TODO or wait until status register goes NEW_DATA;
	ref = HAL_I2C_Mem_Read(&hi2c1, LIGHT_ADDR, LIGHT_DATA_1_0, 1, buf, 1, 1000);
	data[DATA_LIGHT_IR] = buf[0];
	ref = HAL_I2C_Mem_Read(&hi2c1, LIGHT_ADDR, LIGHT_DATA_1_1, 1, buf, 1, 1000);
	data[DATA_LIGHT_IR] |= (buf[0] << 8);
	ref = HAL_I2C_Mem_Read(&hi2c1, LIGHT_ADDR, LIGHT_DATA_0_0, 1, buf, 1, 1000);
	data[DATA_LIGHT_ALL] = buf[0];
	ref = HAL_I2C_Mem_Read(&hi2c1, LIGHT_ADDR, LIGHT_DATA_0_1, 1, buf, 1, 1000);
	data[DATA_LIGHT_ALL] |= (buf[0] << 8);

	buf[0] = 0x00;
	ref = HAL_I2C_Mem_Write(&hi2c1, LIGHT_ADDR, LIGHT_CONTR, 1, buf, 1, 1000);


	//TODO TURN OFF SENSORS
}

void transmitData(void) {
	HAL_UART_Transmit(&huart1, START_PACKET, sizeof(START_PACKET), 10);

	transmitTime();

	transmitFromIndex(DATA_THERMISTOR);
	transmitFromIndex(DATA_POTENTIOMETER);
	transmitFromIndex(DATA_LIGHT_ALL);
	transmitFromIndex(DATA_LIGHT_IR);

	HAL_UART_Transmit(&huart1, END_PACKET, sizeof(END_PACKET), 10);
}

void transmitFromIndex(int index) {
	HAL_UART_Transmit(&huart1, SENSOR_PREFIX[index], sizeof(SENSOR_PREFIX[index]), 10);

	uint16_t data_cpy = data[index];
	char UART_data[6];
	sprintf(UART_data, "%01d\r\n", data_cpy);

	HAL_UART_Transmit(&huart1, (uint8_t *)UART_data, sizeof(UART_data), 10);
}

void transmitTime() {
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);

	uint8_t date[16]; uint8_t time[16];

	sprintf(date," Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);

	HAL_UART_Transmit(&huart1, (uint8_t *)date, sizeof(date), 1000);
	HAL_UART_Transmit(&huart1, (uint8_t *)time, sizeof(time), 1000);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
