Code reference

This code reference document includes only user-defined code. All code automatically generated by the STM32 Cube IDE can be viewed and modified through the use of the IDE.

Main functions:

Main()
Executes the microcontoller initialisation and operation.
Prompts reading data from EEPROM and outputting to USB if switch 1 flag is true.
Prompts read frequency reconfiguration if switch 2 flag is true.

Configuration functions:

boolean configureReadFrequency()
Operation:
Looks for a reading from the potentiometer representing the new read frequency and a button press for confirmation.
Return:
True if read frequency is successfully changed, false otherwise

LED control functions:

char LEDState(uint8_t LEDNum)
Parameters:
uint_8 LEDnum
LED number
Return:
The state of the LED
n: on
f: off
b: blinking

void blinkLED(uint8_t LEDNum)
Parameters: 
uint_8 LEDnum
LED number
Operation:
Turns LED off if it was previously in any state other than off. Otherwise, turns LED on.

void toggleLED(uint8_t LEDnum)
Parameters: uint_8 LEDnum
LED number
Operation:
Turns LED off if it was previously in any state other than off. Otherwise, turns LED on.

EEPROM functions

boolean appendToEEPROM(uint64_t data)
Parameters: 
uint64_t data
data to write
Operation: 
Appends the given data to the existing data stored in the EEPROM. If the EEPROM is full, writes no data.
Return: 
True if data successfully written, false otherwise


uint64_t fetchFromEEPROM(boolean overwrite)
Parameters:
boolean overwrite
Determines whether to overwrite data after it is fetched
true: overwrite
false: do not overwrite
Return: 
The last 64 bits of data from the EEPROM

Sensor control functions:

uint_16 readSensor(char sensorNumber)
Parameters: 
char SensorNumber
A character representing the sensor to read from
p: Potentiometer
x: Thermistor
l: Light
t: Temperature & Humidity (temperature)
h: Temperature & Humidity (humidity)
Return: 
A 12-bit reading from the relevant sensor

void powerSensor(char sensorNumber, boolean powerValue)
Parameters:
char sensorNumber
A character representing the sensor to read from
p: Potentiometer
x: Thermistor
l: Light
t: Temperature & Humidity (temperature)
h: Temperature & Humidity (humidity)
boolean powerValue
A boolean representing the desired power state
true: on
false: off

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
Parameters:
TIM_HandleTypeDef *htim
Operation:
Timer interrupt. Executes at the configured read frequency
Prompts reading of data from all sensors and writing of this data to EEPROM.

Button interrupt handlers:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
Parameters:
uint16_t GPIO_Pin
GPIO pin for which an interrupt has been triggered
Operation:
Called automatically when a switch is pulled low, triggering an interrupt
Sets the flag for a press of the relevant switch to true. The state of this flag is handled on the next cycle of the main() function.

USB functions

boolean USBPluginState()
Return: 
True if USB plugin is detected, false otherwise

void writeToUSB(uint64_t data)
Parameters: 
uint64_t data
data to write
Operation: 
Outputs the given data over the USB.